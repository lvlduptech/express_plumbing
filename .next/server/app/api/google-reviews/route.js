"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/google-reviews/route";
exports.ids = ["app/api/google-reviews/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgoogle-reviews%2Froute&page=%2Fapi%2Fgoogle-reviews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgoogle-reviews%2Froute.ts&appDir=F%3A%5Cmanus%5Cexpress%5Cexpress_plumbing%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=F%3A%5Cmanus%5Cexpress%5Cexpress_plumbing&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgoogle-reviews%2Froute&page=%2Fapi%2Fgoogle-reviews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgoogle-reviews%2Froute.ts&appDir=F%3A%5Cmanus%5Cexpress%5Cexpress_plumbing%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=F%3A%5Cmanus%5Cexpress%5Cexpress_plumbing&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var F_manus_express_express_plumbing_src_app_api_google_reviews_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/google-reviews/route.ts */ \"(rsc)/./src/app/api/google-reviews/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/google-reviews/route\",\n        pathname: \"/api/google-reviews\",\n        filename: \"route\",\n        bundlePath: \"app/api/google-reviews/route\"\n    },\n    resolvedPagePath: \"F:\\\\manus\\\\express\\\\express_plumbing\\\\src\\\\app\\\\api\\\\google-reviews\\\\route.ts\",\n    nextConfigOutput,\n    userland: F_manus_express_express_plumbing_src_app_api_google_reviews_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/google-reviews/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnb29nbGUtcmV2aWV3cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZ29vZ2xlLXJldmlld3MlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZnb29nbGUtcmV2aWV3cyUyRnJvdXRlLnRzJmFwcERpcj1GJTNBJTVDbWFudXMlNUNleHByZXNzJTVDZXhwcmVzc19wbHVtYmluZyU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RiUzQSU1Q21hbnVzJTVDZXhwcmVzcyU1Q2V4cHJlc3NfcGx1bWJpbmcmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzZCO0FBQzFHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhwcmVzcy1wbHVtYmluZy1uZXh0anMvPzlkM2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRjpcXFxcbWFudXNcXFxcZXhwcmVzc1xcXFxleHByZXNzX3BsdW1iaW5nXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGdvb2dsZS1yZXZpZXdzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9nb29nbGUtcmV2aWV3cy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dvb2dsZS1yZXZpZXdzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9nb29nbGUtcmV2aWV3cy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkY6XFxcXG1hbnVzXFxcXGV4cHJlc3NcXFxcZXhwcmVzc19wbHVtYmluZ1xcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxnb29nbGUtcmV2aWV3c1xcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvZ29vZ2xlLXJldmlld3Mvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgoogle-reviews%2Froute&page=%2Fapi%2Fgoogle-reviews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgoogle-reviews%2Froute.ts&appDir=F%3A%5Cmanus%5Cexpress%5Cexpress_plumbing%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=F%3A%5Cmanus%5Cexpress%5Cexpress_plumbing&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/google-reviews/route.ts":
/*!*********************************************!*\
  !*** ./src/app/api/google-reviews/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n// src/app/api/google-reviews/route.ts\n\n// --- In-Memory Cache Configuration ---\nlet cachedReviewsData = null;\n// Cache duration: How long to keep reviews in cache before re-fetching.\n// For testing \"newest\", set to 0 AND RESTART YOUR DEV SERVER.\nconst CACHE_DURATION_MS = 1 * 60 * 60 * 1000; // 1 hour (default)\n// const CACHE_DURATION_MS = 0; // Example for testing: disables cache\nasync function GET() {\n    const currentTime = Date.now();\n    // console.log(`[API v1 /google-reviews] Route hit at ${new Date(currentTime).toISOString()}`);\n    // 1. Check Cache\n    if (CACHE_DURATION_MS > 0 && cachedReviewsData && currentTime - cachedReviewsData.timestamp < CACHE_DURATION_MS) {\n        // console.log('[API v1 /google-reviews] CACHE HIT: Returning cached reviews.');\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            reviews: cachedReviewsData.reviews\n        });\n    }\n    // console.log(`[API v1 /google-reviews] CACHE MISS or EXPIRED/DISABLED (Duration: ${CACHE_DURATION_MS}ms). Fetching fresh reviews.`);\n    // 2. Fetch from Google Places API (v1)\n    const apiKey = process.env.GOOGLE_PLACES_API_KEY;\n    const placeId = process.env.GOOGLE_PLACE_ID;\n    if (!apiKey || !placeId) {\n        console.error(\"[API v1 /google-reviews] CRITICAL ERROR: Google API Key or Place ID is not configured.\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Server configuration error: API Key or Place ID missing.\"\n        }, {\n            status: 500\n        });\n    }\n    const fields = [\n        \"id\",\n        \"displayName\",\n        \"rating\",\n        \"userRatingCount\",\n        \"reviews.authorAttribution.displayName\",\n        \"reviews.authorAttribution.uri\",\n        \"reviews.authorAttribution.photoUri\",\n        \"reviews.publishTime\",\n        \"reviews.rating\",\n        \"reviews.text.text\",\n        \"reviews.relativePublishTimeDescription\"\n    ].join(\",\");\n    const googleApiUrl = `https://places.googleapis.com/v1/places/${placeId}?fields=${fields}&key=${apiKey}&languageCode=en`;\n    // console.log(`[API v1 /google-reviews] Fetching URL (API key redacted): ${googleApiUrl.replace(apiKey, \"YOUR_API_KEY_REDACTED\")}`);\n    try {\n        const response = await fetch(googleApiUrl, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            cache: \"no-store\"\n        });\n        if (!response.ok) {\n            let errorDetails = {\n                message: `Google API responded with status ${response.status}`\n            };\n            try {\n                errorDetails = await response.json();\n            } catch (e) {}\n            console.error(\"[API v1 /google-reviews] Google Places API (v1) error response:\", errorDetails);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Failed to fetch reviews from Google (v1): ${response.statusText}`,\n                details: errorDetails\n            }, {\n                status: response.status\n            });\n        }\n        const data = await response.json();\n        if (!data || !data.reviews) {\n            console.warn(\"[API v1 /google-reviews] Google Places API (v1) response missing reviews array or main data. Data:\", data);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                reviews: [],\n                details: `Google API (v1) response missing reviews.`\n            }, {\n                status: 200\n            });\n        }\n        let fetchedV1Reviews = data.reviews || [];\n        // console.log(`[API v1 /google-reviews] Fetched ${fetchedV1Reviews.length} raw reviews. First author (before sort): ${fetchedV1Reviews[0]?.authorAttribution?.displayName || 'N/A'}`);\n        // ** Sort reviews by publishTime (newest first) **\n        fetchedV1Reviews.sort((a, b)=>{\n            const timeA = a.publishTime ? new Date(a.publishTime).getTime() : 0;\n            const timeB = b.publishTime ? new Date(b.publishTime).getTime() : 0;\n            return timeB - timeA; // Sorts in descending order (newest first)\n        });\n        // console.log(`[API v1 /google-reviews] Reviews sorted. First author (after sort): ${fetchedV1Reviews[0]?.authorAttribution?.displayName || 'N/A'}`);\n        // --- Your Business Logic: e.g., Filter for 5-star reviews ---\n        // If you only want 5-star reviews, this filter will be applied to the newest reviews.\n        // If the newest review isn't 5-star, it won't be included.\n        const fiveStarV1Reviews = fetchedV1Reviews.filter((review)=>review.rating === 5);\n        // console.log(`[API v1 /google-reviews] Filtered to ${fiveStarV1Reviews.length} newest reviews with rating === 5.`);\n        // Transform GoogleV1Review to AppReview format\n        const transformedReviews = fiveStarV1Reviews.map((review, index)=>{\n            const authorName = review.authorAttribution?.displayName || \"Anonymous\";\n            const reviewTimeSeconds = review.publishTime ? Math.floor(new Date(review.publishTime).getTime() / 1000) : Math.floor(Date.now() / 1000);\n            return {\n                author_name: authorName,\n                author_url: review.authorAttribution?.uri,\n                profile_photo_url: review.authorAttribution?.photoUri,\n                rating: review.rating,\n                relative_time_description: review.relativePublishTimeDescription || \"\",\n                text: review.text?.text || \"\",\n                time: reviewTimeSeconds,\n                id: `v1-${reviewTimeSeconds}-${authorName.replace(/\\s+/g, \"-\")}-${index}`\n            };\n        });\n        // 3. Update Cache\n        cachedReviewsData = {\n            reviews: transformedReviews,\n            timestamp: currentTime\n        };\n        // console.log(`[API v1 /google-reviews] Cache updated. New timestamp: ${new Date(currentTime).toISOString()}`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            reviews: transformedReviews\n        });\n    } catch (error) {\n        console.error(\"[API v1 /google-reviews] CATCH BLOCK: Unexpected error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error while fetching reviews (v1).\",\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/google-reviews/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgoogle-reviews%2Froute&page=%2Fapi%2Fgoogle-reviews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgoogle-reviews%2Froute.ts&appDir=F%3A%5Cmanus%5Cexpress%5Cexpress_plumbing%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=F%3A%5Cmanus%5Cexpress%5Cexpress_plumbing&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();